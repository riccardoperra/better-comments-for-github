@layer prosemirror {
  /* ../../node_modules/.pnpm/prosemirror-view@1.37.1/node_modules/prosemirror-view/style/prosemirror.css */
  .ProseMirror {
    position: relative;
  }

  .ProseMirror {
    word-wrap: break-word;
    white-space: pre-wrap;
    white-space: break-spaces;
    -webkit-font-variant-ligatures: none;
    font-variant-ligatures: none;
    font-feature-settings: 'liga' 0;
  }

  .ProseMirror pre {
    white-space: pre-wrap;
  }

  .ProseMirror li {
    position: relative;
  }

  .ProseMirror-hideselection *::selection {
    background: transparent;
  }

  .ProseMirror-hideselection *::-moz-selection {
    background: transparent;
  }

  .ProseMirror-hideselection {
    caret-color: transparent;
  }

  .ProseMirror [draggable][contenteditable='false'] {
    user-select: text;
  }

  .ProseMirror-selectednode {
    outline: 2px solid #8cf;
  }

  li.ProseMirror-selectednode {
    outline: none;
  }

  li.ProseMirror-selectednode:after {
    content: '';
    position: absolute;
    left: -32px;
    right: -2px;
    top: -2px;
    bottom: -2px;
    border: 2px solid #8cf;
    pointer-events: none;
  }

  img.ProseMirror-separator {
    display: inline !important;
    border: none !important;
    margin: 0 !important;
  }

  /* ../pm/src/view/style/prosemirror.css */
  /* ../extensions/src/table/style.css */
  .ProseMirror .tableWrapper {
    overflow-x: auto;
  }

  .ProseMirror table {
    border-collapse: collapse;
    table-layout: fixed;
    width: 100%;
    overflow: hidden;
  }

  .ProseMirror td,
  .ProseMirror th {
    vertical-align: top;
    box-sizing: border-box;
    position: relative;
    border-width: 1px;
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }

  .ProseMirror .column-resize-handle {
    position: absolute;
    right: -2px;
    top: 0;
    bottom: 0;
    width: 4px;
    z-index: 20;
    background-color: HighlightText;
    pointer-events: none;
  }

  .ProseMirror.resize-cursor {
    cursor: ew-resize;
    cursor: col-resize;
  }

  .ProseMirror .selectedCell {
    --color: 210, 100%, 56%;
    background-color: hsla(var(--color), 20%);
    border: 1px double hsl(var(--color));
  }

  /* ../extensions/src/placeholder/style.css */
  .prosekit-placeholder::before {
    position: absolute;
    opacity: 30%;
    pointer-events: none;
    height: 0;
    content: attr(data-placeholder);
  }

  /* ../extensions/src/virtual-selection/style.css */
  .prosekit-virtual-selection {
    background-color: #8888884d;
    box-shadow: 0 0 0 2px #8888884d;
    border-radius: 2px;
  }

  /* ../extensions/src/commit/style.css */
  .prosekit-commit-deletion {
    background-color: #e5534b80;
    text-decoration: line-through;
  }

  .prosekit-commit-addition {
    background-color: #53e54b80;
  }

  /* ../extensions/src/gap-cursor/style.css */
  .ProseMirror-gapcursor {
    display: none;
    pointer-events: none;
    position: relative;
  }

  .ProseMirror-gapcursor:after {
    content: '';
    display: block;
    position: absolute;
    top: -2px;
    width: 20px;
    border-top: 1px solid currentColor;
    animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
  }

  @keyframes ProseMirror-cursor-blink {
    to {
      visibility: hidden;
    }
  }
  .ProseMirror-focused .ProseMirror-gapcursor {
    display: block;
  }

  /* ../basic/src/style.css */
  /* src/basic/style.css */
  /* ../basic/src/typography.css */
  div.ProseMirror {
    display: flex;
    flex-direction: column;
  }

  div.ProseMirror {
    line-height: 1.5;
  }

  div.ProseMirror p:first-child,
  div.ProseMirror h1:first-child,
  div.ProseMirror h2:first-child,
  div.ProseMirror h3:first-child,
  div.ProseMirror h4:first-child,
  div.ProseMirror h5:first-child,
  div.ProseMirror h6:first-child {
    margin-top: 0;
  }

  div.ProseMirror p:last-child,
  div.ProseMirror h1:last-child,
  div.ProseMirror h2:last-child,
  div.ProseMirror h3:last-child,
  div.ProseMirror h4:last-child,
  div.ProseMirror h5:last-child,
  div.ProseMirror h6:last-child {
    margin-bottom: 0;
  }

  div.ProseMirror h1,
  div.ProseMirror h2,
  div.ProseMirror h3,
  div.ProseMirror h4,
  div.ProseMirror h5,
  div.ProseMirror h6 {
    font-weight: 600;
    line-height: 1.25;
    padding-top: 0;
    padding-bottom: 0;
    border-style: none;
  }

  div.ProseMirror a {
    text-decoration: underline;
    font-weight: 500;
  }

  div.ProseMirror p,
  div.ProseMirror ul,
  div.ProseMirror ol,
  div.ProseMirror pre {
    margin: 0;
    line-height: 1.5;
  }

  div.ProseMirror blockquote {
    padding-left: 1em;
    border-left: 0.25em solid hsla(0, 0%, 60%, 0.4);
  }

  div.ProseMirror h1 {
    margin: 1rem 0;
    font-size: 2.25em;
  }

  div.ProseMirror h2 {
    margin: 1.75em 0 0.5em;
    font-size: 1.75em;
  }

  div.ProseMirror h3 {
    margin: 1.5em 0 0.5em;
    font-size: 1.375em;
  }

  div.ProseMirror h4 {
    margin: 1em 0;
    font-size: 1.125em;
  }

  div.ProseMirror h5 {
    margin: 0.5em 0;
  }

  div.ProseMirror h6 {
    opacity: 0.8;
  }

  div.ProseMirror img,
  div.ProseMirror video {
    margin: 0;
    width: min-content;
    max-width: 100%;
  }

  div.ProseMirror code {
    font-size: 0.875em;
    font-weight: 600;
  }

  div.ProseMirror pre {
    margin: 0.5rem 0;
    padding: 2rem 2rem;
    overflow-x: auto;
    border-radius: 0.375rem;
  }

  div.ProseMirror pre,
  div.ProseMirror code {
    white-space: pre;
    word-spacing: normal;
    word-break: normal;
    word-wrap: normal;
    tab-size: 4;
    hyphens: none;
  }

  div.ProseMirror pre code {
    font-weight: inherit;
  }

  div.ProseMirror hr {
    margin: 2em 0;
  }

  div.ProseMirror .prosekit-horizontal-rule {
    line-height: 1px;
  }

  :is(div.ProseMirror .prosekit-horizontal-rule) hr {
    margin: 0;
  }

  div.ProseMirror .ProseMirror-selectednode {
    z-index: calc(infinity);
  }

  div.ProseMirror div[data-node-view-root='true'] {
    display: contents;
  }

  /* src/basic/typography.css */
}

.ProseMirror .prosemirror-flat-list {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
  margin-left: var(--base-size-24);
  position: relative;
  display: list-item;
  list-style: none;

  + .prosemirror-flat-list {
    margin-top: 0.25rem;
  }

  &[data-list-kind='task'] {
    .list-content {
      padding-left: var(--base-size-6);
    }
  }

  + p:first-of-type {
    margin-top: var(--base-size-16);
  }
}

.prosemirror-flat-list.ProseMirror-selectednode {
  outline: none;
}

.prosemirror-flat-list.ProseMirror-selectednode:after {
  content: '';
  position: absolute;
  left: -32px;
  right: -2px;
  top: -2px;
  bottom: -2px;
  border: 2px solid #8cf;
  pointer-events: none;
}

.prosemirror-flat-list[data-list-kind='bullet'] {
  list-style: disc;
}

.prosemirror-flat-list[data-list-kind='ordered'] {
  counter-increment: prosemirror-flat-list-counter;
}

.prosemirror-flat-list[data-list-kind='ordered'] > * {
  contain: style;
}

.prosemirror-flat-list[data-list-kind='ordered']::before {
  position: absolute;
  right: 100%;
  font-variant-numeric: tabular-nums;
  content: counter(prosemirror-flat-list-counter, decimal) '. ';
}

.prosemirror-flat-list[data-list-kind='ordered']:first-child,
:not(.prosemirror-flat-list[data-list-kind='ordered'])
  + .prosemirror-flat-list[data-list-kind='ordered'] {
  counter-reset: prosemirror-flat-list-counter;
}

@supports (counter-set: prosemirror-flat-list-counter 1) {
  [data-list-order]:is(
      .prosemirror-flat-list[data-list-kind='ordered']:first-child,
      :not(.prosemirror-flat-list[data-list-kind='ordered'])
        + .prosemirror-flat-list[data-list-kind='ordered']
    ) {
    counter-set: prosemirror-flat-list-counter
      var(--prosemirror-flat-list-order);
  }
}

@supports not (counter-set: prosemirror-flat-list-counter 1) {
  [data-list-order]:is(
      .prosemirror-flat-list[data-list-kind='ordered']:first-child,
      :not(.prosemirror-flat-list[data-list-kind='ordered'])
        + .prosemirror-flat-list[data-list-kind='ordered']
    ) {
    counter-increment: prosemirror-flat-list-counter
      var(--prosemirror-flat-list-order);
  }
}

.prosemirror-flat-list[data-list-kind='task'] > .list-marker {
  position: absolute;
  right: 100%;
  text-align: center;
  width: 1.5em;
  width: 1lh;
}

.prosemirror-flat-list[data-list-kind='task'] > .list-marker,
.prosemirror-flat-list[data-list-kind='task'] > .list-marker * {
  cursor: pointer;
}

.prosemirror-flat-list[data-list-kind='toggle'] > .list-marker {
  position: absolute;
  right: 100%;
  text-align: center;
  width: 1.5em;
  width: 1lh;
}

.prosemirror-flat-list[data-list-kind='toggle'] > .list-marker::before {
  content: '\23f7';
}

.prosemirror-flat-list[data-list-kind='toggle'][data-list-collapsable][data-list-collapsed]
  > .list-marker::before {
  content: '\23f5';
}

.prosemirror-flat-list[data-list-kind='toggle'][data-list-collapsable]
  > .list-marker {
  cursor: pointer;
}

.prosemirror-flat-list[data-list-kind='toggle']:not([data-list-collapsable])
  > .list-marker {
  opacity: 40%;
  pointer-events: none;
}

.prosemirror-flat-list[data-list-kind='toggle'][data-list-collapsable][data-list-collapsed]
  > .list-content
  > *:nth-child(n + 2) {
  display: none;
}

div.ProseMirror .prosemirror-flat-list {
  line-height: 1.5;

  > .list-content > p {
    margin: 0;
    padding-bottom: 0;
  }
}

:is(div.ProseMirror .prosemirror-flat-list)::before,
:is(div.ProseMirror .prosemirror-flat-list) > .list-marker {
  /*top: 0.5rem;*/
}

:is(div.ProseMirror .prosemirror-flat-list):has(
    > div.list-content > h1
  )::before,
:is(div.ProseMirror .prosemirror-flat-list):has(> div.list-content > h1)
  > .list-marker {
  top: 1em;
}

:is(div.ProseMirror .prosemirror-flat-list):has(
    > div.list-content > h2
  )::before,
:is(div.ProseMirror .prosemirror-flat-list):has(> div.list-content > h2)
  > .list-marker {
  top: 0.6em;
}

:is(div.ProseMirror .prosemirror-flat-list):has(
    > div.list-content > h3
  )::before,
:is(div.ProseMirror .prosemirror-flat-list):has(> div.list-content > h3)
  > .list-marker {
  top: 0.25em;
}

:is(div.ProseMirror .prosemirror-flat-list):has(
    > div.list-content > h4
  )::before,
:is(div.ProseMirror .prosemirror-flat-list):has(> div.list-content > h4)
  > .list-marker {
  top: 0;
}

:is(div.ProseMirror .prosemirror-flat-list):has(
    > div.list-content > h5
  )::before,
:is(div.ProseMirror .prosemirror-flat-list):has(> div.list-content > h5)
  > .list-marker {
  top: -0.1em;
}

:is(div.ProseMirror .prosemirror-flat-list):has(
    > div.list-content > h6
  )::before,
:is(div.ProseMirror .prosemirror-flat-list):has(> div.list-content > h6)
  > .list-marker {
  top: -0.1em;
}
